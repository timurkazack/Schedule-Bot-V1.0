from telebot import *
from ws_parser import norm_schedule
from ws_parser import run_auto_update
import threading as th
import time
import ws_parser
from utils.sql_use import *
from utils import api
from utils.get_schedule import *


#password = input("PASSWORD > ")
api = api.get_api() #password

opened_to_users = True

admin_id = 6983370282

bot = telebot.TeleBot(api, parse_mode="HTML")

run_auto_update()


choice_class_text = "üìñ –í—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å"
choice_class_again_text = "‚óÄÔ∏è –í—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å –∑–∞–Ω–æ–≤–æ"
donate_text = "üí∏ –î–æ–Ω–∞—Ç"
help_text = "‚ùì –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
settings_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
classes_text = "–∫–ª–∞—Å—Å—ã"


site = "https://nextler.ru/6zk8zL1lsy.html?companyid=-mzPgPOgmP0hOUbHwopNk&tableid=-DpPW1Nus2Ypi6avVpfzu"


START_MESSAGE = """üëã –ü—Ä–∏–≤–µ—Ç {user_first_name}
–ù–∞ —Å–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —à–∫–æ–ª—ã —Ç—Ä—É–¥–Ω–æ –Ω–∞–π—Ç–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å?
<a href="https://nextler.ru/6zk8zL1lsy.html?companyid=-mzPgPOgmP0hOUbHwopNk&tableid=-DpPW1Nus2Ypi6avVpfzu">–°–∞–π—Ç</a> –¥–æ–ª–≥–æ –≥—Ä—É–∑–∏—Ç?

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ!
–¢–µ–±–µ –≤—Å–µ–≥–æ –ª–∏—à—å –Ω–∞–¥–æ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π –∫–ª–∞—Å—Å, –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—Éüëá"""

HELP_MESSAGE = """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:
/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (–ü—Ä–∏–¥—ë—Ç—Å—è –∑–∞–Ω–æ–≤–æ –≤—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å)
/help - –ü–æ–ª—É—á–∏—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/proposal - –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É

–î–Ω–∏ –Ω–µ–¥–µ–ª–∏/–∫–ª–∞—Å—Å—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —à–∫–æ–ª—ã.
–ï—Å–ª–∏ –∫–∞–∫–æ–≥–æ-—Ç–æ –¥–Ω—è/–∫–ª–∞—Å—Å–∞ –Ω–µ—Ç –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞, –∑–Ω–∞—á–∏—Ç –µ–≥–æ –Ω–µ—Ç –∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ"""

FROM_CHAT_START_MESSAGE = """–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!
–ê–¥–º–∏–Ω—É: 
/set_class (–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è)
/set_newsletter_time (–ó–∞–¥–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ù–∞–ø–∏—à–∏ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö)
/disable_newsletter_time (–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ —ç—Ç–æ –≤—Ä–µ–º—è. –ù–∞–ø–∏—à–∏ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö)"""

HELPER_MESSAGE = "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –æ–±—Ä–∞—â–µ–Ω–∏–µ:"
CHOICE_PARALLEL_MESSAGE = "–í—ã–±–µ—Ä–µ—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—åüëá"
CHOICE_CLASS_MESSAGE = "–í—ã–±–µ—Ä–µ—Ç–µ –∫–ª–∞—Å—Åüëá"
SAVE_CLASS_MESSAGE = """–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!
–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüëá"""


def main():
   bot.polling(none_stop=True)
   time.sleep(utils.get_settings("telegram_bot", "stop_time_h") * 60 * 60)
   bot.stop_bot()
   exit()

@bot.message_handler(commands=["start"])
def start_func(message):
    update_user_data(message)
    user_data = get_user_data(message)
    my_logger.info(f"{user_data['tg_id']} used START MESSAGE FUNC")

    #from users
    markup_menu_buttons = types.ReplyKeyboardMarkup(resize_keyboard=True)
    choice_class_menu_button = types.KeyboardButton(choice_class_text)
    #donate_menu_button = types.KeyboardButton(donate_text)
    help_menu_button = types.KeyboardButton(help_text)
    #settings_menu_button = types.KeyboardButton(settings_text)

    markup_menu_buttons.row(choice_class_menu_button)
    markup_menu_buttons.row(help_menu_button)#, donate_menu_button)
    #markup_menu_buttons.row(settings_menu_button)



    if not opened_to_users:
        if user_data["is_admin"] == 1:
            bot.send_message(user_data["tg_id"], START_MESSAGE.format(user_first_name=user_data["tg_first_name"]), reply_markup=markup_menu_buttons)
    else:
        if message.chat.type not in ["group", "supergroup"]:
            bot.send_message(user_data["tg_id"], START_MESSAGE.format(user_first_name=user_data["tg_first_name"]), reply_markup=markup_menu_buttons)
        else:
            chat_member = bot.get_chat_member(message.chat.id, message.from_user.id)
            if chat_member.status in ["creator", "administrator"]:
                msg = bot.send_message(message.chat.id, "–ø—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω")
            bot.delete_message(message.chat.id, message.message_id)






@bot.message_handler(commands=["help"])
def help_func(message):
    update_user_data(message)
    user_data = get_user_data(message)
    my_logger.info(f"{user_data['tg_id']} used HELP MESSAGE FUNC")



    if opened_to_users or user_data["is_admin"] == 1:
        bot.send_message(message.from_user.id, HELP_MESSAGE)



@bot.message_handler(commands=["get_user_count"])
def get_users_count(message):
    update_user_data(message)
    user_data = get_user_data(message)
    my_logger.info(f"{user_data['tg_id']} used GET USER COUNT FUNC")

    if user_data["is_admin"] == 1:
        bot.reply_to(message, f"{get_user_count()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

@bot.message_handler(commands=["get_all_users"])
def get_all_users(message):
    update_user_data(message)
    user_data = get_user_data(message)
    my_logger.info(f"{user_data['tg_id']} used GET ALL USERS FUNC")

    if user_data["is_admin"] == 1:
        with open(get_all_sql_users(), "r", encoding="utf-8") as f:
            bot.send_document(message.from_user.id, f)

@bot.message_handler(commands=["post"])
def post1(message):
    update_user_data(message)
    user_data = get_user_data(message)
    my_logger.info(f"{user_data['tg_id']} used POST FUNC")

    if user_data["is_admin"] == 1:
        bot.reply_to(message, "‚úÖ\n–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç!")
        bot.register_next_step_handler(message, post2)

def post2(message):
    user_data = get_user_data(message)

    if user_data["is_admin"] == 1:
        for id in get_all_users_id():
            bot.forward_message(id, user_data['tg_id'], message.message_id)
            my_logger.info(f"Forward post to {id}")

@bot.message_handler(commands=["stop"])
def stop_admin_func(message):
    update_user_data(message)
    user_data = get_user_data(message)
    my_logger.info(f"{user_data['tg_id']} used STOP FUNC")

    if user_data["is_admin"] == 1:
        bot.reply_to(message, "‚úÖ")
        exit()


@bot.message_handler(commands=["upd"])
def upd_admin_func(message):
    update_user_data(message)
    user_data = get_user_data(message)
    my_logger.info(f"{user_data['tg_id']} used UPD FUNC")

    if user_data["is_admin"] == 1:
        bot.reply_to(message, "‚úÖ")
        ws_parser.get_data_from_server()

@bot.message_handler(commands=["aus"])
def aus_admin_func(message):
    update_user_data(message)
    user_data = get_user_data(message)
    my_logger.info(f"{user_data['tg_id']} used AUTO UPDATE SWAP FUNC")

    if user_data["is_admin"] == 1:
        bot.reply_to(message, "‚úÖ")
        ws_parser.updates = False if ws_parser.updates else True




@bot.message_handler(func=lambda message: message.text == help_text)
def get_help_contact(message):
    update_user_data(message)
    user_data = get_user_data(message)
    my_logger.info(f"{user_data['tg_id']} used GET HELP FUNC")


    if opened_to_users or user_data["is_admin"] == 1:
        bot.send_message(message.from_user.id, HELPER_MESSAGE)
        bot.register_next_step_handler(message, send_to_admin_helper_message)


@bot.message_handler(commands=["proposal"])
def send_to_admin_helper_message(message):
    update_user_data(message)
    user_data = get_user_data(message)
    my_logger.info(f"{user_data['tg_id']} used GET HELP FUNC 2")


    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"help_{message.from_user.id}"),
        types.InlineKeyboardButton("–ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"ban_{message.from_user.id}"))


    if opened_to_users or user_data["is_admin"] == 1:
        bot.send_message(admin_id, f"–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ({message.from_user.id}):\n{message.text}")#, reply_markup=markup)
        bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")





@bot.message_handler(func=lambda message: message.text == choice_class_text or message.text == choice_class_again_text)
def get_choice_parallel(message):
    update_user_data(message)
    user_data = get_user_data(message)
    my_logger.info(f"{user_data['tg_id']} used CHOICE PARALLEL FUNC")


    markup_parallel = types.ReplyKeyboardMarkup(resize_keyboard=True)

    buttons = []

    for parallel in get_classes():
        buttons.append(
            types.KeyboardButton(parallel + f" {classes_text}"))

    markup_parallel.add(*buttons)


    if opened_to_users or user_data["is_admin"] == 1:
        bot.send_message(message.from_user.id, CHOICE_PARALLEL_MESSAGE, reply_markup=markup_parallel)






@bot.message_handler(func=lambda message: message.text in [f"{key} {classes_text}" for key in get_classes()])
def get_choice_class(message):
    update_user_data(message)
    user_data = get_user_data(message)
    my_logger.info(f"{user_data['tg_id']} used CHOICE CLASS FUNC and choice {message.text}")


    markup_class = types.ReplyKeyboardMarkup(resize_keyboard=True)

    buttons = []

    for klass in get_classes()[message.text.replace(f" {classes_text}", "")]:
        buttons.append(
            types.KeyboardButton(klass))

    markup_class.add(*buttons)

    if opened_to_users or user_data["is_admin"] == 1:
        bot.send_message(message.from_user.id, CHOICE_CLASS_MESSAGE, reply_markup=markup_class)


@bot.message_handler(func=lambda message: any(message.text in classes for classes in get_classes().values()))
def save_choice_class(message):
    update_user_data(message, klass=message.text)
    user_data = get_user_data(message)
    my_logger.info(f"{user_data['tg_id']} used SAVE CHOICE CLASS FUNC and choice {message.text}")


    markup_days = types.ReplyKeyboardMarkup(resize_keyboard=True)

    buttons = []

    for day in russian_days():
        buttons.append(
            types.KeyboardButton(day))

    markup_days.add(*buttons)
    markup_days.row(choice_class_again_text)

    if opened_to_users or user_data["is_admin"] == 1:
        bot.send_message(message.from_user.id, SAVE_CLASS_MESSAGE, reply_markup=markup_days)


@bot.message_handler(func=lambda message: message.text in russian_days())
def get_schedule_for_user(message):
    update_user_data(message)
    user_data = get_user_data(message)
    my_logger.info(f"{user_data['tg_id']} used GET SCHEDULE FUNC and choice {message.text}")

    ru_day = message.text
    en_day = get_ru_day_to_en(ru_day)

    if opened_to_users or user_data["is_admin"] == 1:
        bot.send_message(message.from_user.id,
                         norm_schedule(user_data["worked_class"], en_day))


bot.remove_webhook()
th1 = th.Thread(target = main)
th1.start()